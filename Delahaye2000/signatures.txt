let id : (A : Type) -> A -> A
let const : (A B : Type) -> A -> B -> A
let apply : (A : Type) (B : A -> Type) -> ((x : A) -> B x) -> (x : A) -> B x
let flip : (A B C : Type) -> (A -> B -> C) -> (B -> A -> C)

let curry : (A : Type) (B : A -> Type) (C : ((x : A) * B x) -> Type)
  -> ((p : (x : A) * B x) -> C p)
  -> (x : A) (y : B x) -> C (x , y)

let uncurry : (A : Type) (B : A -> Type) (C : (x : A) * B x -> Type)
  -> ((x : A) (y : B x) -> C (x , y))
  -> (p : (x : A) * B x) -> C p

let assoc : (A : Type) (B : A -> Type) (C : (x : A) -> B x -> Type)
  -> (p : (x : A) * B x) * C p.1 p.2
  -> (x : A) * (y : B x) * C x y

let pair : (A B : Type) -> A -> B -> A * B

let proj1 : (A : Type) (B : A -> Type) (p : (x : A) * B x) -> A

let proj2 : (A : Type) (B : A -> Type) (p : (x : A) * B x) -> B p.1

let swap : (A B : Type) -> A * B -> B * A

let bimap : (A B : Type) (P : A -> Type) (Q : B -> Type)
  -> (f : A -> B)
  -> ((x : A) -> P x -> Q (f x))
  -> (x : A) * P x
  -> (y : B) * Q y

let False : Type
let Not : Type -> Type
let Or : Type -> Type -> Type

let Eq : (A : Type) -> A -> A -> Type

let LEM : (A : Type) -> Or A (Not A)

let Bool : Type
let true : Bool
let false : Bool

let eqTrueFalseAbs : (b : Bool) -> Eq Bool b true -> Eq Bool b false -> False
